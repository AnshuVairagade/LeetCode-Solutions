🎖️ LeetCode : 543. Diameter of Binary Tree

✳️ Problem : 
------------
Given the root of a binary tree, return the length of the diameter of the tree. The diameter of a binary tree is the length of the longest path between any two nodes in a tree. This path may or may not pass through the root. The length of a path between two nodes is represented by the number of edges between them.

Example 1:
Input: root = [1,2,3,4,5]
Output: 3
Explanation: 3 is the length of the path [4,2,1,3] or [5,2,1,3].

Example 2:
Input: root = [1,2]
Output: 1


✨ Solution :

🎯 Intution :
            The heights of the left and right subtrees are computed multiple times for each node, which leads to redundant calculations.Instead, we can compute these heights in a bottom-up manner. The Postorder method allows us to validate balance conditions efficiently during the traversal.

🎯 Approach: 
        Step 1: Initialise a variable `diameter` to store the diameter of the tree. Create a function height that takes a node and a reference to the diameter variable as input.
        Step 2: Base Case: If the node is null, return 0 indicating the height of an empty tree.
        Step 3: Recursive Function:
                Recursively calculate the height of the left subtree then height of the right subtree.
                Set the current diameter as the sum of left subtree, right subtree + 1 for the current level.
                Update the diameter with the maximum of the current diameter and the global diameter.    
        Step 4: After the traversal if complete, return the maximum diameter found during the traversal as the result.

🎯Code : 

 
class Solution {
public:

    int dmtr;

    int calc_dmtr(TreeNode* root){
        if(root == nullptr) return 0;

        int lh = calc_dmtr(root->left);
        int rh = calc_dmtr(root->right);

        dmtr = max(dmtr, lh+rh);

        return (1 + max(lh, rh)) ;
    }

    int diameterOfBinaryTree(TreeNode* root) {
        int hgt = calc_dmtr(root);
        return dmtr;
    }
};
